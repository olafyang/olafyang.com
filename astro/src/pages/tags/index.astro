---
import { Picture } from "astro:assets";

import Default from "../../layouts/Default.astro";
import BackButton from "../../components/BackButton.astro";
import { useSanity } from "../../composables/useSanity";

const { sanityClient, builder } = useSanity();

type Tag = {
  id: string;
  name: string;
  description?: string;
  imgId: string;
  url: string;
};

const tags = await sanityClient
  ?.fetch(
    `
    *[_type == "tag"]
    {
    tagID,
    name,
    description,
    "photo": *[_type == "photo" && references(^._id)][0]{objectID, "id": photo.asset}
    }`
  )
  .then((res) => {
    if (res === null) {
      return [];
    }
    return res.map((item: any) => {
      if (item.description) {
        return {
          id: item.tagID,
          name: item.name,
          description: item.description,
          imgId: item.photo.id._ref,
          url: builder.image(item.photo.id._ref).width(500).height(250).url(),
        };
      } else {
        return {
          id: item.tagID,
          name: item.name,
          imgId: item.photo.id._ref,
          url: builder.image(item.photo.id._ref).width(250).height(250).url(),
        };
      }
    }) as Tag[];
  });
---

<style>
  .tag-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  }

  .tag-item {
    position: relative;
    aspect-ratio: 1;
    display: flex;
    height: auto;
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 3rem;
    box-sizing: border-box;
  }

  .tag-item img {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: 10px;
  }

  .tag-item.description {
    grid-column: span 2;
    aspect-ratio: 2/1;
  }

  .tag-info {
    position: absolute;
    bottom: -3rem;
    width: calc(100% - 2rem);
    min-height: 45px;
  }

  .tag-item.description:hover .tag-info {
    opacity: 1;
    transform: translateY(0);
  }

  .tag-info.description {
    min-height: unset;
    transition-property: opacity, transform;
    transition-duration: 0.1s;
    transition-timing-function: ease-in-out;
    opacity: 0;
    transform: translateY(0.5rem);
    bottom: 1rem;
    left: 1rem;
    padding: 0.75rem;
    box-sizing: border-box;
    height: fit-content;
    background-color: rgba(8, 32, 74, 0.8);
    backdrop-filter: blur(15px);
    font-size: 0.8rem;
    width: calc(100% - 2rem);
    border-radius: 15px;
  }

  .tag-info.description p {
    color: white;
  }

  @media screen and (max-width: 450px) {
    .tag-list {
      grid-template-columns: 1fr;
    }
    .tag-item {
      aspect-ratio: unset;
      display: block;
    }
    .tag-item.description {
      aspect-ratio: 1;
      grid-column: span 1;
    }
    .tag-item picture {
      aspect-ratio: 1;
      max-width: 250px;
      max-height: 250px;
    }
  }

  .tag-item.description picture {
    width: 100%;
  }
  .tag-item.description img {
    width: 100%;
    height: 100% !important;
    aspect-ratio: unset;
  }
</style>

<Default>
  <div class="item-viewer">
    <div class="sub-nav">
      <BackButton />
      <h1>Tags</h1>
    </div>

    <section class="tag-list">
      {
        tags.map((item) => (
          <a
            href={`/tags/${item.id}`}
            class={item.description ? "tag-item description" : "tag-item"}
          >
            <Picture
              src={item.url}
              alt=""
              height="250"
              inferSize
              style="object-fit: cover;"
            />
            <div class="tag-info">
              <p>{item.name}</p>
            </div>
            {item.description && (
              <div class="tag-info description">
                <p>{item.description}</p>
              </div>
            )}
          </a>
        ))
      }
    </section>
  </div>
</Default>
